# Author: Nicole Haight
# Description:  This program creates a class called Point
#               that stores Point objects containing attributes for
#               x and y coordinates along a cartesian plane.
#               The Point class also contains a method for measuring the distance between two points.
#               This program also creates a class called LineSegment
#               that stores LineSegment objects containing attributes for endpoints of a line segment.
#               The endpoints receive coordinates from the Point class.
#               The LineSegment class also contains methods for:
#               - line segment object length() calculation
#               - line segment object slope() calculation
#               - line segment object comparison of two object slopes: is_parallel_to()

class Point:
    def __init__(self, x_coord, y_coord ):
        """Establish baseline attributes for new objects of the Point class"""
        self._x_coord = x_coord
        self._y_coord = y_coord

    def get_x_coord(self):
        """returns x coordinate of the current instance"""
        return self._x_coord

    def get_y_coord(self):
        """returns y coordinate of the current instance"""
        return self._y_coord

    def distance_to(self, other_point):
        """returns the distance from the current point instance to another point"""

        # retrieve data members from other_point, as it is outside of current instance
        # assign the data member vales to x2 or y2 for readability later in the code

        x2 = other_point.get_x_coord()
        y2 = other_point.get_y_coord()


        # assign the current instance of coordinates into x1 or y1 for readability

        x1 = self._x_coord
        y1 = self._y_coord

        # formula for hypotenuse distance = [(x2 - x1)**2 + (y2 - y1)**2]**0.5
        # formula has been broken down into segments of a triangle for easier readability

        adjacent_side_squared = (x2 - x1)**2
        opposite_side_squared = (y2 - y1)**2

        distance = (adjacent_side_squared + opposite_side_squared)**0.5

        return distance

class LineSegment:
    def __init__(self, point_1, point_2):
        """Establish baseline attributes for new objects of the LineSegment class"""
        self._endpoint_1 = point_1
        self._endpoint_2 = point_2

    def get_endpoint_1(self):
        """returns endpoint_1 of the current instance"""
        return self._endpoint_1

    def get_endpoint_2(self):
        """returns endpoint_2 of the current instance"""
        return self._endpoint_2

    def length(self):
        """
            returns the length of the segment between the endpoints
            of the current instance
        """
        length = self._endpoint_1.distance_to(self._endpoint_2)

        return length

    def slope(self):
        """returns the slope of a line segment"""
        # slope formula: m = (y2 - y1) / (x2 - x1)

        # Because the line segments are made of individual x and y points..
        # ..from another class (the Point class),
        # ..the get() method extracts the points needed
        # .. for the endpoint attributes of the LineSegment class

        # as seen previously, x1, y1, etc. are assigned to data members for readability


        y2 = self._endpoint_2.get_y_coord()
        y1 = self._endpoint_1.get_y_coord()

        x1 = self._endpoint_1.get_x_coord()
        x2 = self._endpoint_2.get_x_coord()

        slope = (y2 - y1) / (x2 - x1)

        return slope

    def is_parallel_to(self, line_seg_object):
        """
            This function takes a LineSegment object as an argument,
            and calculates its slope using the slope() method.
            Then, it compares it to the slope of the current LineSegment object.
            If the slopes are the same, a Boolean True is return.
            Otherwise, a Boolean False is returned
        """

        slope = self.slope()
        para_slope = line_seg_object.slope()

        if ((abs(slope - para_slope) < 1e-7) == True):
            return True

        else:
            return False

# point_1 = Point(7,4)
# point_2 = Point(-6,18)
# print(point_1.distance_to(point_2))
# line_seg_1 = LineSegment(point_1,point_2)
# print(line_seg_1.length())
# print(line_seg_1.slope())

# point_3 = Point(-2,2)
# point_4 = Point(24, 12)
# line_seg_2 = LineSegment(point_3,point_4)
# print(line_seg_1.is_parallel_to(line_seg_2))
